//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToolBX.Collections.ObservableList.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Exceptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Exceptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ToolBX.Collections.ObservableList.Resources.Exceptions", typeof(Exceptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t copy {0} : count must be a positive number but its value was {1}.
        /// </summary>
        internal static string CannotCopyBecauseCountIsNegative {
            get {
                return ResourceManager.GetString("CannotCopyBecauseCountIsNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t copy {0} : index is expected to be between {1} and {2} but its value was {3}.
        /// </summary>
        internal static string CannotCopyBecauseIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotCopyBecauseIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t copy {0} : a range between {1} and {2} is expected but the values of startingIndex and count were {3} and {4} respectively.
        /// </summary>
        internal static string CannotCopyBecauseRangeFallsOutsideBoundaries {
            get {
                return ResourceManager.GetString("CannotCopyBecauseRangeFallsOutsideBoundaries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t enumerate {0} : collection was modified during enumeration.
        /// </summary>
        internal static string CannotEnumerateBecauseModified {
            get {
                return ResourceManager.GetString("CannotEnumerateBecauseModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t get item : index is expected to be between {0} and {1} but its value was {2}.
        /// </summary>
        internal static string CannotGetItemBecauseIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotGetItemBecauseIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t insert items into {0} : index is expected to be between {1} and {2} but its value was {3}.
        /// </summary>
        internal static string CannotInsertItemsBecauseIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotInsertItemsBecauseIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t instantiate {0} : parameter {1} is mandatory.
        /// </summary>
        internal static string CannotInstantiateObjectBecauseParameterIsMandatory {
            get {
                return ResourceManager.GetString("CannotInstantiateObjectBecauseParameterIsMandatory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t instantiate {0} : {1} must be a positive number but its value was {2}.
        /// </summary>
        internal static string CannotInstantiateObjectBecauseParameterMustBePositiveNumber {
            get {
                return ResourceManager.GetString("CannotInstantiateObjectBecauseParameterMustBePositiveNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove item from {0} : count must be greater than zero but its value was {1}.
        /// </summary>
        internal static string CannotRemoveItemBecauseCountIsZero {
            get {
                return ResourceManager.GetString("CannotRemoveItemBecauseCountIsZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove item from {0} : index is expected to be between {1} and {2} but its value was {3}.
        /// </summary>
        internal static string CannotRemoveItemBecauseIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotRemoveItemBecauseIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove item from {0} : {1} is not in collection.
        /// </summary>
        internal static string CannotRemoveItemBecauseItIsNotInCollection {
            get {
                return ResourceManager.GetString("CannotRemoveItemBecauseItIsNotInCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove item from {0} : there is no item corresponding to predicate in collection.
        /// </summary>
        internal static string CannotRemoveItemBecauseNoItemFitPredicate {
            get {
                return ResourceManager.GetString("CannotRemoveItemBecauseNoItemFitPredicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove item from {0} : a range between {1} and {2} is expected but the values of index and count were {3} and {4} respectively.
        /// </summary>
        internal static string CannotRemoveItemBecauseRangeFallsOutsideBoundaries {
            get {
                return ResourceManager.GetString("CannotRemoveItemBecauseRangeFallsOutsideBoundaries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t remove items from {0} : one or more item is not in collection.
        /// </summary>
        internal static string CannotRemoveItemsBecauseOneIsNotInCollection {
            get {
                return ResourceManager.GetString("CannotRemoveItemsBecauseOneIsNotInCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t set item : index is expected to be between {0} and {1} but its value was {2}
        ///.
        /// </summary>
        internal static string CannotSetItemBecauseIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotSetItemBecauseIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t swap items : current index is expected to be within the collection&apos;s boundaries of 0 and {1} but its value was {1}.
        /// </summary>
        internal static string CannotSwapItemsBecauseCurrentIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotSwapItemsBecauseCurrentIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t swap items : destination index is expected to be within the collection&apos;s boundaries of 0 and {1} but its value was {1}.
        /// </summary>
        internal static string CannotSwapItemsBecauseDestinationIndexIsOutOfRange {
            get {
                return ResourceManager.GetString("CannotSwapItemsBecauseDestinationIndexIsOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t use TrimEnd : maxSize must be a positive number but its value was {0}.
        /// </summary>
        internal static string TrimEndRequiresPositiveMaxSize {
            get {
                return ResourceManager.GetString("TrimEndRequiresPositiveMaxSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t use TrimStart : maxSize must be a positive number but its value was {0}.
        /// </summary>
        internal static string TrimStartRequiresPositiveMaxSize {
            get {
                return ResourceManager.GetString("TrimStartRequiresPositiveMaxSize", resourceCulture);
            }
        }
    }
}
